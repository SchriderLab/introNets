118,120d117
<     //ramcode
< 	int *desc;
<     //ramcode
127,131d123
< //ramcode
< char *intro;
< extern double nhtime;
< int debug = 1 ;
< //ramcode
137,146d128
< 
<     // ramcode
< 	// howmany = nreps
< 	// nsam = number of haplotypers per sample
< 	// segsitesin = 0 : varying number of segregating sites
< 	// gensam -- where the action happens
< 	// streec contains the core code for the coalescent
< 	// mfreq -- minimum frequency of sites in output (>=2 and <= nsam/2)
<     // ramcode
< 
149,152d130
<     // ramcode
< 	char **anc;
< 	char **anc2;
<     // ramcode
154,162d131
<     // ramcode
< 	FILE *ancfs;
< 	FILE *anc2fs;
<     FILE *introfs;
< 	FILE *genofs;
< 	FILE *snpfs;
< 	FILE *indfs;
<     // ramcode
< 
166,168c135,136
<     // ramcode
< 	int gensam( char **list, double *probss, double *ptmrca, double *pttot, char **anc, char **anc2 , int chr) ;
<     // ramcode
---
> 	int gensam( char **list, double *probss, double *ptmrca, double *pttot ) ;
> 
185,192d152
<     // ramcode
< 	anc2fs = fopen("out.alt.anc", "w");
< 	ancfs = fopen("out.anc", "w");
< 	genofs = fopen("out.geno", "w");
< 	snpfs = fopen("out.snp", "w");
< 	indfs = fopen("out.ind", "w");
<     introfs = fopen ("out.intro", "w");
<     // ramcode
196,200d155
<         // ramcode
< 	     anc = cmatrix(pars.cp.nsam,maxsites+1);
< 	     anc2 = cmatrix(pars.cp.nsam,maxsites+1);
<          intro = (char *)malloc((unsigned) ((maxsites+1)*sizeof(char)));
<         // ramcode
205,209d159
<         // ramcode
< 	     anc = cmatrix(pars.cp.nsam, pars.mp.segsitesin+1 ) ;
< 	     anc2 = cmatrix(pars.cp.nsam, pars.mp.segsitesin+1 ) ;
<          intro = (char *)malloc((unsigned) ((pars.mp.segsitesin+1)*sizeof(char)));
<         // ramcode
217,248d166
<     // ramcode
< 	int num  = 0;
< 	int denom =  0;
< 	int chr =  0;
< 
< 	char fname1[100];
< 	char fname2[100];
< 	char fname4[100];
< 	FILE **f1, **f2, **f4;
< 	f1 = (FILE **)malloc ( pars.cp.npop * sizeof (FILE *));
< 	f2 = (FILE **)malloc ( pars.cp.npop * sizeof (FILE *));
< 	f4 = (FILE **)malloc ( pars.cp.npop * sizeof (FILE *));
< 
< 	for ( i = 0 ; i < pars.cp.npop; i++) {
< 		if (i==0) { 
< 			sprintf (fname1,"out.ADMIXED.anc");
< 			sprintf (fname4,"out.ADMIXED.alt.anc");
< 			sprintf (fname2,"out.ADMIXED.geno");
< 			f1[i] = fopen (fname1,"w");
< 			f2[i] = fopen (fname2,"w");
< 			f4[i] = fopen (fname4,"w");
< 		} else { 
< 			sprintf (fname1,"out.%d.anc",i);
< 			sprintf (fname4,"out.%d.alt.anc",i);
< 			sprintf (fname2,"out.%d.geno",i);
< 			f1[i] = fopen (fname1,"w");
< 			f2[i] = fopen (fname2,"w");
< 			f4[i] = fopen (fname4,"w");
< 		}
< 	}
<     // ramcode
< 
250d167
< 	    chr ++;
266,268c183
<         // ramcode
<         segsites = gensam( list, &probss, &tmrca, &ttot, anc, anc2, chr ) ; 
<         // ramcode
---
>         segsites = gensam( list, &probss, &tmrca, &ttot ) ; 
273d187
< 
279c193
< 	       if( segsites > 0 )  {
---
> 	       if( segsites > 0 ) 
281,334d194
<           // ramcode
< 		  int j  = 0 ;
< 		  int prevpos = -1;
< 		  for (j =  0 ;j < segsites; j++){ 
< 			  int pos = (int)(posit[j]*1e6);
< 			  if (pos == prevpos) continue;
< 			  prevpos = pos;
<               double recombrate = (pars.cp.r)/(4.0*10000*pars.cp.nsites);
<               double gpos = pos * recombrate; 
< 			  fprintf (snpfs, "%d:%d\t%d\t%9.6lf\t%d\tA\tG\n",chr,pos,chr, gpos ,pos);
<               fprintf (introfs, "%d:%d\t%c\n",chr,pos, intro[j]);
< 			  for (i=0;i<pars.cp.nsam;i++) { 
< 				  fprintf(ancfs, "%c",anc[i][j]);
< 				  fprintf(anc2fs, "%c",anc2[i][j]);
< 				  fprintf(genofs,"%c",list[i][j]);
< 			  }
< 			  fprintf (ancfs,"\n");
< 			  fprintf (anc2fs,"\n");
< 			  fprintf (genofs,"\n");
< 		  }
< 		   if (pars.cp.npop > 1) {
< 	         	 for(i=0;i<pars.cp.config[0]; i++) { 
< 				 int  j  = 0; 
< 				 for (j=0; j  <segsites;j++){
< 					 num+=(anc[i][j]=='1');
< 				 }  
< 			}
< 
< 			for (i  = 0 ; i < pars.cp.npop; i++) {
< 				int t = 0;
< 				for (j=0; j < i;j++) t+= pars.cp.config[j];
< 
< 		  		int prevpos = -1;
< 				for (j=0; j  <segsites;j++){
< 				  int pos = (int)(posit[j]*1e6);
< 				  if (pos == prevpos) continue;
< 				  prevpos = pos;
< 					 int k  = 0 ;
< 					 for (k = t ; k < t+pars.cp.config[i]; k++) {
< 						fprintf (f1[i], "%c",anc[k][j]);
< 						fprintf (f4[i], "%c",anc2[k][j]);
< 						fprintf (f2[i], "%c",list[k][j]);
< 					 }
< 					 fprintf (f1[i], "\n");
< 					 fprintf (f4[i], "\n");
< 					 fprintf (f2[i], "\n");
< 				 }
< 		   }
< 
< 		   denom += pars.cp.config[0]*segsites;
< 		   }
< 	       }
<            //ramcode
<            //
337,369d196
< 
<     // ramcode
< 	if (pars.cp.npop > 1 ) {
< 		int i = 0 ;
< 		char fname3[100];
< 		FILE *f3;
< 		for (i  = 0 ; i < pars.cp.npop; i++) {
< 			int j  =  0;
< 			if (i==0) { 
< 				sprintf (fname3,"out.ADMIXED.ind");
< 				f3 = fopen (fname3,"w");
< 				for (j = 0 ; j < pars.cp.config[0]; j++) {
< 					fprintf (indfs, "%d:%d\tU\tADMIXED\n",i,j);
< 					fprintf (f3, "%d:%d\tU\tADMIXED\n",i,j);
< 				}
<                 fclose (f3);
< 			} else {
< 
< 				sprintf (fname3,"out.%d.ind",i);
< 
< 				f3 = fopen (fname3,"w");
< 				for (j = 0 ; j < pars.cp.config[i]; j++) {
< 					fprintf (indfs, "%d:%d\tU\tPOP%d\n",i,j,i);
< 					fprintf (f3, "%d:%d\tU\tPOP%d\n",i,j,i);
< 				}
<                 fclose (f3);
< 			}
< 		}
< 	}
< 	double prop = ((double)num)/denom;
< 	fprintf (pf, "# Admixture proportion = %2.3f\n", prop);
<     // ramcode
< 
372,384d198
<     // ramcode
< 	fclose (indfs);
< 	fclose (snpfs);
<     fclose (ancfs);
<     fclose (anc2fs);
<     fclose (genofs);
<     fclose (introfs);
<     for (i = 0 ; i < pars.cp.npop ; i ++) {
<         fclose (f1[i]);
<         fclose (f2[i]);
<         fclose (f4[i]);
<     }
<     // ramcode
390c204
< gensam( char **list, double *pprobss, double *ptmrca, double *pttot, char **anc ,char **anc2 ,int chr) 
---
> gensam( char **list, double *pprobss, double *ptmrca, double *pttot ) 
401,403d214
<     // ramcode
<     void sibs (struct node *ptree,int  nsam, int node, double  height, int *sib);
<     // ramcode
405,407d215
<     // ramcode
< 	int make_gametes1(int nsam, int mfreq,  struct node *ptree, double tt, int newsites, int ns, char **list, int *desc, char **anc, int *sib, char **anc2);
<     // ramcode
413,415d220
<     // Here's the meat of the logic -- in streec.c
<     // Returns a seglst struct which has the histories of the gametes
<     //
437c242
<     // ramcode
---
> 
455d259
<      // ramcode
459,466d262
< 	
<      // ramcode
<      int *sib;
<      sib  =  (int *)malloc( (unsigned)(2 * nsam - 1)*sizeof( int) );
<      // ramcode
<      //
< 	 // For each unrecombined segment (nsegs), add mutations (make_gametes)
< 
472,473d267
< 		
< 		// tseg = Total population mutation rate in the seg
475,476d268
< 		
< 		// tt = total branch length in the tree
479d270
<         // Number of seg sites in this segment
484,489c275
<             biggerlist(nsam, list) ; 
<             // ramcode
<             biggerlist(nsam, anc) ; 
<             biggerlist(nsam, anc2) ; 
<             intro = (char *)realloc (intro, maxsites*sizeof(char));
<             // ramcode
---
> 			  biggerlist(nsam, list) ; 
491,514c277
< //		make_gametes(nsam,mfreq,seglst[seg].ptree,tt, segsit, ns, list );
< 		// ramcode
<         sibs ( seglst[seg].ptree, nsam , nsam - 1, nhtime, sib);
<         if (debug >  0  ) {
< 
<             int nsib = 0 ;
<             int l =  0;
<             for (l = 0 ; l < nsam-1;l++)
<                 nsib += (sib[l]==2);
<             printf ("[%d], Segments= %d, Pos (chr%d:%d-%d), SNP (%d-%d) , nhtime = %2.3f, nsib = %d\n",len, k, chr, start, end, ns, ns+segsit, nhtime, nsib);
<             for (l = 0 ; l < nsam;l++)
<                 if (sib[l]==2)
<                   printf ("%d,",l);
<             printf ("\n");
<         }
< 		make_gametes1(nsam,mfreq,seglst[seg].ptree,tt, segsit, ns, list, seglst[seg].desc, anc,  sib, anc2);
<         int l;
<         if (debug) {
<             for (l = 0 ; l < ns+segsit; l++)
<                 printf ("%c", intro[l]);
<             printf ("\n");
<         }
<         // ramcode
< 
---
> 		make_gametes(nsam,mfreq,seglst[seg].ptree,tt, segsit, ns, list );
549,552d311
<       // ramcode
<       int *sib;
<       sib  =  (int *)malloc( (unsigned)(2  * nsam - 1)*sizeof( int) );
<       // ramcode
558,567c317
< //		 make_gametes(nsam,mfreq,seglst[seg].ptree,tt*pk[k]/tseg, ss[k], ns, list);
< //		 ramcode
< //		 nsam - nsamples,
< //       mfreq - 
< //       seglst - list of segments returned  from stree
< //
<          // ramcode
<          sibs ( seglst[seg].ptree, nsam , nsam - 1, nhtime, sib);
< 		 make_gametes1(nsam,mfreq,seglst[seg].ptree,tt*pk[k]/tseg, ss[k], ns, list, seglst[seg].desc, anc, sib, anc2);
<          // ramcode
---
> 		 make_gametes(nsam,mfreq,seglst[seg].ptree,tt*pk[k]/tseg, ss[k], ns, list);
578,580d327
<     // ramcode
< 	for(i=0;i<nsam;i++) anc[i][ns] = '\0' ;
<     // ramcode
674d420
<     // ramcode
676d421
<     // ramcode
770d514
<             // ramcode
775d518
<                 // ramcode
1075d817
< 
1078,1130d819
< // ramcode
< int
< make_gametes1(int nsam, int mfreq, struct node *ptree, double tt, int newsites, int ns, char **list , int *desc, char **anc, int *sib, char **anc2)
< {
< 	int  tip, j,  node ;
<         int pickb(int nsam, struct node *ptree, double tt), 
<             pickbmf(int nsam, int mfreq, struct node *ptree, double tt) ;
< 
< 	for(  j=ns; j< ns+newsites ;  j++ ) {
< 		if( mfreq == 1 ) node = pickb(  nsam, ptree, tt);
< 		else node = pickbmf(  nsam, mfreq, ptree, tt);
< 		for( tip=0; tip < nsam ; tip++) {
< 		   if( tdesn(ptree, tip, node) ) list[tip][j] = STATE1 ;
< 		   else list[tip][j] = STATE2 ;
< 		   }
< 
<         int a = nsam - 1;
<         intro[j] = STATE2;
<         if ( (ptree+node)->time < nhtime )  {
<            int flag =  1;
<            for (tip = 0 ; tip < nsam; tip++) { 
<             if (list[tip][j]==STATE1 && desc[tip]!=1) flag = 0;
<            } 
<            intro[j] = (flag==1)?STATE1:STATE2;
<         }
< 
< 
<         /*
<         if ( (ptree+node)->time < nhtime )  {
<            int flag =  1;
<            for (tip = 0 ; tip < nsam; tip++) { 
<             if (list[tip][j]==STATE1 && desc[tip]==1) {}
<             else flag =  0;
<            } 
<            intro[j] = (flag==1)?STATE1:STATE2;
<         }*/
< 
<         /*
<         if (tdesn (ptree, a, node) && (ptree+node)->time < nhtime ) {
<             intro[j] = STATE1;
<         } else 
<             intro[j] = STATE2;
<         */
<         
<     }
< 	for (j=ns; j <ns+newsites;j++) {
< 		for( tip=0; tip < nsam ; tip++) {
< 			anc[tip][j] = (desc[tip]==1) ? STATE1 : STATE2;
< 			anc2[tip][j] = (sib[tip]==2) ? STATE1 : STATE2;
< 		}
< 	}
< }
< // ramcode
1165,1190d853
< // ramcode
< void sibs (ptree, nsam, node, height, sib)
< 	struct node *ptree;
< 	int nsam;
<     int node;
<     double height;
<     int *sib;
< {
< 	void getdesc (struct node *ptree, int nsam, int node, int *done);
<     double h  = 0 ;
<     int ind =  node;
<     int prev = ind;
<     while ( h < height ) { 
<         prev = ind;
<         ind = (ptree + ind)->abv;
<         h += (ptree+ind)->time;
<         if (ind==0)
<             break;
<     }
<     int i;
<     for (i = 0 ; i < 2*nsam - 1; i++)
<         sib[i] = 0;
<     getdesc ( ptree, nsam, prev, sib);
< }
< //ramcode
< 
1232,1330d894
< 
< // ramcode
< 	void
< prforest( ptree, nsam, node)
< 	struct node *ptree;
< 	int nsam;
< 	int node;
< {
< 	double t;
< 	int i, *descl, *descr ;
< 	void parens( struct node *ptree, int *descl, int *descr, int noden );
< 
< 	descl = (int *)malloc( (unsigned)(2*nsam-1)*sizeof( int) );
< 	descr = (int *)malloc( (unsigned)(2*nsam-1)*sizeof( int) );
< 	for( i=0; i<2*nsam-1; i++) descl[i] = descr[i] = -1 ;
< 	for( i = 0; i< 2*nsam-2; i++){
< 		if ((ptree+i)->abv==0)continue;
< 	  if( descl[ (ptree+i)->abv ] == -1 ) descl[(ptree+i)->abv] = i ;
< 	  else descr[ (ptree+i)->abv] = i ;
< 	 }
< 
< 	for (i  = 0 ; i <2*nsam-1;i++){
< 		printf ("(%d,%d,%d)",i,descl[i],descr[i]);
< 	}
< 	printf ("\n");
< 
< 	parens( ptree, descl, descr, node);
< 	printf ("\n");
< 	free( descl ) ;
< 	free( descr ) ;
< }
< 
< 
< // Get all the descendants of node
< // Input : ptree, nsam - number of samples, node -- index of node in ptree
< // Output: done -- array of size (2*nsam-1). 
< // done[i] = 1 if i is a descendant of node in ptree, 
< // done[i] = 2 if  i is a decendant of node in ptree and i is a leaf
< 	void
< getdesc ( ptree, nsam, node, done)
< 	struct node *ptree;
< 	int nsam;
< 	int node;
< 	int *done;
< {
< 	double t;
< 	int i, *descl, *descr ;
< 	void parens( struct node *ptree, int *descl, int *descr, int noden );
< 
< 	descl = (int *)malloc( (unsigned)(2*nsam-1)*sizeof( int) );
< 	descr = (int *)malloc( (unsigned)(2*nsam-1)*sizeof( int) );
< 	int *q = (int *)malloc( (unsigned)(2*nsam-1)*sizeof( int) );
< 
< 	for( i=0; i<2*nsam-1; i++) 
< 		done[i] = 0;
< 
< 
< 	for( i=0; i<2*nsam-1; i++) descl[i] = descr[i] = -1 ;
< 	for( i = 0; i< 2*nsam-2; i++){
< 	  if ((ptree+i)->abv==0)continue;
< 	  if( descl[ (ptree+i)->abv ] == -1 ) descl[(ptree+i)->abv] = i ;
< 	  else descr[ (ptree+i)->abv] = i ;
< 	 }
< 
< 	int s = 0 ;
< 	int e = 1;
< 	q[s]  = node;
< 
< 	while (s<e) {
< 		int tmp = q[s];
< 		done[tmp] = 1;
< 		if (descl[tmp]==-1 && descr[tmp]==-1){
< 			done[tmp] = 2;
< 		}
< 		if (descl[tmp]>=0 && !done[descl[tmp]]){
< 			q[e] = descl[tmp];
< 			e=e+1;
< 		}
< 		if (descr[tmp]>=0 && !done[descr[tmp]]){
< 			q[e] = descr[tmp];
< 			e=e+1;
< 		}
< 		s = s  + 1;
< 	}
< 
< 	/*
< 	for (i  = 0 ; i <2*nsam-1;i++){
< 		printf ("(%d,%d,%d)",i,descl[i],descr[i]);
< 	}
< 	printf ("\n");
< 		*/
< 	free( descl ) ;
< 	free( descr ) ;
< 	free (q);
< }
< 
< // ramcode
< 
< 
