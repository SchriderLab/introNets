43c43
< extern int flag;
---
> extern long flag;
45c45
< int nchrom, begs, nsegs;
---
> long nchrom, begs, nsegs;
47,49c47
< // Number of nodes and hence, the pointer to the root, in each segment.
< // Initially it is nsam - 1
< static int *nnodes = NULL ;  
---
> static long *nnodes = NULL ;  
56,58c54,56
< 	int beg;
< 	int end;
< 	int desc;
---
> 	long beg;
> 	long end;
> 	long desc;
61,68d58
< //ramcode
< //Each chromosome is represented as a struct
< // pop = which population
< // nseg - number of segments
< // pseg - pointer to segments (beg, end, individual number that inherits this chr or more generally the label of the root of the tree for this segment) 
< // Important Invariant: For each chr and each segl in seglst, it is either absent in pseg or is contained within a single segment of pseg.
< //ramcode
< 
70,71c60,61
< 	int nseg;
< 	int pop;
---
> 	long nseg;
> 	long pop;
78,79c68,69
< 	int abv;
< 	int ndes;
---
> 	long abv;
> 	long ndes;
84c74
< 	int beg;
---
> 	long beg;
86,89c76
< 	int next;
<     // ramcode
< 	int *desc;
<     // ramcode
---
> 	long next;
91,93d77
< // Stores all the segments (crossovers)
< // nseg -- number of segments
< // Number of segments increases only when there is a xover
96,127d79
< //ramcode
< void printptree (struct node *ptree, int nsam){
< 	int i ;
< 	for (i  = 0 ; i <2*nsam-1;i++){
< 		printf ("(%d:%d:%2.3f),",i,(ptree+i)->abv, (ptree+i)->time);
< 	}
< }
< 
< // Prints all segments
< void printseglist () {
< 	int i = 0;
< 	int s  = 0;
< 	for (; i < nsegs ;  i++, s = seglst[s].next){
< 		printf ("%d,",seglst[s].beg);
< 	}
< 
< 	printf ("\n");
< }
< 
< void printseg ( int c) { 
< 	int i =  0;
< 	struct seg *s = chrom[c].pseg;
< 	for (; i < chrom[c].nseg; i++){ 
< 		printf ("(%d,%d,%d),", s[i].beg, s[i].end, s[i].desc);
< 	}
< 	printf ("\n");
< }
< 
< 
< double nhtime = 0;
< //ramcode
< 
129c81
< segtre_mig(struct c_params *cp, int *pnsegs ) 
---
> segtre_mig(struct c_params *cp, long *pnsegs ) 
131,132c83,84
< 	int i, j, k, seg, dec, pop, pop2, c1, c2, ind, rchrom, intn  ;
< 	int migrant, source_pop, *config, flagint ;
---
> 	long i, j, k, seg, dec, pop, pop2, c1, c2, ind, rchrom, intn  ;
> 	long migrant, source_pop, *config, flagint ;
136,137c88,91
< 	int re(), xover(), cinr(), cleftr(), eflag, cpop, ic  ;
< 	int nsam, npop, nsites, nintn, *inconfig ;
---
> 	long re(),  cinr(), cleftr(), eflag, cpop, ic  ;
>     int xover ();
> 	long nsam, npop, nsites, nintn ;
>     int *inconfig;
143,146d96
<     // ramcode
< 	int *done = (int *)malloc( (unsigned)(2*nsam-1)*sizeof( int) );
<     // ramcode
< 
158d107
< 	// sc: List of events as given in the commandline
168c117
< 		nnodes = (int*) malloc((unsigned)(seglimit*sizeof(int)))  ;
---
> 		nnodes = (long*) malloc((unsigned)(seglimit*sizeof(long)))  ;
176c125
< 	config = (int *)malloc( (unsigned) ((npop+1)*sizeof(int) )) ;
---
> 	config = (long *)malloc( (unsigned) ((npop+1)*sizeof(long) )) ;
202,216d150
< 
< 
< 	int debug = 0;
< 	// ramcode
< 	//printf ("nind =  %d, nchrom = %d", ind, nchrom);
< 	/*
< 	for (ic =  0 ; ic <  ind; ic++){
< 		 printf ("Individuals = %d, %d, %d\n",
< 				(chrom[ic].pseg)->beg,
< 				(chrom[ic].pseg)->end,
< 				(chrom[ic].pseg)->desc);
< 
< 	}*/
< 	// ramcode
< 
238,245c172
<     /* Main loop */
<     // ramcode
< 	// eflag = 1 if there is an event : coalescence, migration, recombination etc.
< 	// tmin is the time to this event
< 	// config [] - lineages in each population
< 	// size[] - Ne
< 	// alphag[] - growth 
<     // ramcode
---
> /* Main loop */
318,328d244
< 		// ramcode
< 		/*
< 		printf ("Population event\n");
< 		for (ic  = 0 ;ic < nchrom; ic++){
< 				  printf ("Individuals  = %d, %d, %d\n",
< 				(chrom[ic].pseg)->beg,
< 				(chrom[ic].pseg)->end,
< 				(chrom[ic].pseg)->desc);
< 		}*/
< 		// ramcode
< 
377c293
< 	    case 'j' :         /* merge pop i into pop j  (join) */
---
> 	        case 'j' :         /* merge pop i into pop j  (join) */
380,389d295
<           //
<           //ramcode
<           if (i==2 && j==0) {
<               nhtime = nextevent->time;
<           }
< 		  if (debug) {
<               printf (" Merging population %d (%d) to population %d (%d) at time %2.3f\n",i,config[i], j, config[j],nhtime);
<           }
<           //ramcode
<           
403c309
< 	    case 's' :         /*split  pop i into two;p is the proportion from pop i, and 1-p from pop n+1  */
---
> 	        case 's' :         /*split  pop i into two;p is the proportion from pop i, and 1-p from pop n+1  */
407c313
< 		  config = (int *)realloc( config, (unsigned)(npop*sizeof( int) )); 
---
> 		  config = (long *)realloc( config, (unsigned)(npop*sizeof( long) )); 
421d326
<           // Assign chromosomes to pop i or npop-1 with probability (p,1-p).
426,427c331,332
<     			 chrom[ic].pop = npop-1 ;
< 	    		 config[npop-1]++;
---
> 			 chrom[ic].pop = npop-1 ;
> 			 config[npop-1]++;
432,533c337
< 		  //ramcode
< 		  if (debug) 
< 			 printf ("Split\n");
< 
<      	  for (ic = 0 ; ic < nsegs; ic++) {
< 			 seglst[ic].desc =  (int *)malloc( (unsigned)(nsam)*sizeof( int) );
< 			 int j  ;
<   			 for (j = 0 ; j < nsam; j++) 
< 				 seglst[ic].desc[j] = 0;
< 			 
< 		  }
< 		 
< 		  if (debug)
< 			  printf ("nchrom = %d, npop = %d, nsam = %d\n", nchrom, npop, nsam);
< 
< 		  for (ic  = 0 ;ic < nchrom; ic++){
< 			  if (chrom[ic].pop == npop-2){
< 				  if (debug)
< 					  printf ("ic=%d\t",ic);
< 
< 				  struct seg *s = chrom[ic].pseg;
< 				  for (i = 0 ; i < 2*nsam - 1; i++)
< 					done[i] = 0;
< 
< 				  if (debug) {
< 					  int j  = 0 ;
< 					  for (  j = 0 ;  j < chrom[ic].nseg; j++) {
< 						  printf ("(%d,%d),",s[j].beg, s[j].end);
< 					  }
< 					  printf ("\n");
< 				  }
< 
<                   for (  j = 0 ;  j < chrom[ic].nseg; j++) {
<                       int l = 0;
<                       int k = 0;
<                       for( l=0,k=0; (k<nsegs)&&(s[j].beg > seglst[l].beg);
<                               l=seglst[l].next, k++) ;
<                       getdesc (seglst[l].ptree, nsam, s[j].desc, done);
< 
<                       if (debug){
<                           for (i  = 0; i < 2*nsam-1; i++)
<                               printf ("%d,",done[i]);
<                           printf ("\n");
<                       }
<                   }
< 			  }
< 		  }
< 
< 		  for (ic  = 0 ;ic < nchrom; ic++){
<               // for all chromosomes that are ascending the Neandertal branch (picked by their population number)
<               // for each segment, find all individuals that descend from that segment
<               //
< 			  if (chrom[ic].pop== npop-1 || chrom[ic].pop == 2){
< 				  
< 				  	struct seg *s = chrom[ic].pseg;
< 					int i  = 0 ;
< 					int j  = 0;
< 					for (i = 0 ; i < 2*nsam - 1; i++)
< 						done[i] = 0;
< 					
< 					int k = 0 ;
< 					for (i = 0; i < chrom[ic].nseg; i++) {
< 
<                         // Discard all segments that are not part of this chromosome
< 						for( j=0,k=0; (k<nsegs)&&(s[i].beg > seglst[j].beg);
< 					   		j=seglst[j].next, k++) ;
< 
<                         // for all segments that are in this chromosome
<                         // find all descendants (done [l] == 2)
<                         // and store in seglst[j].desc
< 						for (;(k<nsegs) && (s[i].end >= seglst[j].beg);
< 							j=seglst[j].next, k++){
< 							getdesc (seglst[j].ptree, nsam, s[i].desc, done);				
< 
< 
< 							int l = 0 ;
< 							for (l = 0 ; l < nsam; l++)
< 								if (done[l]==2)
< 									seglst[j].desc[l]  = 1;
< 						
< 						}
< 
< 					}
< 			  }
< 		  }
< 
< 		  if (debug){
< 			  printf ("More desc\n");
< 			  int k =  0;
< 			  for (ic = 0 ; ic < nsegs; k=seglst[k].next, ic++){
< 				  int *desc  = seglst[k].desc;
< 				  int j ;
< 				  printf ("%d\t",seglst[k].beg);
< 				  for ( j = 0  ; j < nsam; j++){
< 					  printf ("%d,",desc[j]);
< 				  }
< 				  printf ("\n");
< 			  }
< 		  }
<           //ramcode
<           //
< 		  break;
---
> 		   break;
536,657c340,384
<     else {
<         t += tmin ;	
<         // ramcode
<         if (debug) {
<             printf ("event = %c\n", event);
<         }
<         // ramcode
<         if( event == 'r' ) {   
<             if( (ran = ran1()) < ( prec / prect ) ){ /*recombination*/
<                 rchrom = re(nsam);
<                 config[ chrom[rchrom].pop ] += 1 ;
<             }
<             else if( ran < (prec + clefta)/(prect) ){    /*  cleft event */
<                 rchrom = cleftr(nsam);
<                 config[ chrom[rchrom].pop ] += 1 ;
<             }
<             else  {         /* cin event */
<                 rchrom = cinr(nsam,nsites);
<                 if( rchrom >= 0 ) config[ chrom[rchrom].pop ] += 1 ;
<             }
<             //ramcode
<             if (debug){
<                 printf ("Recombination event:");
<                 printf ("Recombined %d to give (%d,%d,%d),(%d,%d,%d)\n", rchrom, (chrom[rchrom].pseg)->beg,(chrom[rchrom].pseg)->end,(chrom[rchrom].pseg)->desc,(chrom[nchrom-1].pseg)->beg,(chrom[nchrom-1].pseg)->end,(chrom[nchrom-1].pseg)->desc);
<                 printf ("New chromosomes\n");
<                 printseg (rchrom);
<                 printseg (nchrom-1);
<                 printseglist (nsegs);
<             }
<             //ramcode
< 
<         }
<         else if ( event == 'm' ) {  /* migration event */
<             x = mig*ran1();
<             sum = 0.0 ;
<             for( i=0; i<nchrom; i++) {
<                 sum += migm[chrom[i].pop][chrom[i].pop] ;
<                 if( x <sum ) break;
<             }
<             migrant = i ;
<             x = ran1()*migm[chrom[i].pop][chrom[i].pop];
<             sum = 0.0;
<             for(i=0; i<npop; i++){
<                 if( i != chrom[migrant].pop ){
<                     sum += migm[chrom[migrant].pop][i];
<                     if( x < sum ) break;
<                 }
<             }
<             source_pop = i;
<             config[chrom[migrant].pop] -= 1;
<             config[source_pop] += 1;
<             chrom[migrant].pop = source_pop ;
<         }
<         else { 								 /* coalescent event */
<             /* pick the two, c1, c2  */
<             pick2_chrom( cpop, config, &c1,&c2);  /* c1 and c2 are chrom's to coalesce */
< 
<             //ramcode
<             if (debug){
<                 printf ("Coalescence event:");
<                 printf ("Coalescing %d(%d) and %d(%d)\n", c1, chrom[c1].nseg, c2, chrom[c2].nseg);
<                 printseg (c1);
<                 printseg (c2);
<                 printseglist ();
<                 printf ("Coalescing at time %f\n", t);
<             }
<             //ramcode
< 
<             dec = ca(nsam,nsites,c1,c2 );
<             config[cpop] -= dec ;
<             //ramcode
<             // At the end of this process
<             // c1 contains the new chromosome, c2 contains the last chromosome , nchrom = nchrom - 1
<             if (debug){
<                 printf ("Post-coalescence event:");
<                 printseg (c1);
<                 printseg (c2);
<                 printseglist ();
<             }
<             /*
<                printf ("forming %d(%d) and %d(%d)\n", c1, chrom[c1].nseg, c2, chrom[c2].nseg);
<                printseg (c1);
<                printseg (c2);*/
< 
<             /*
<                int i = 0;
<                struct seg *s = chrom[c1].pseg;
<                printf ("Trees\n");
<                for (; i < chrom[c1].nseg; i++) {
<                printf ("Beg = %d, Desc = %d\t",s[i].beg,s[i].desc);
<                prforest (seglst[i].ptree, nsam, s[i].desc);
<                printptree (seglst[i].ptree, nsam);
<                int j  ;
<                for (j = 0 ; j < 2*nsam - 1; j++)
<                done[j] = 0;
<                getdesc (seglst[i].ptree, nsam, s[i].desc, done);				
<                printf ("\nDescendants\t");
<                for (j = 0 ; j < nsam; j++){
<                if (done[j]==2)
<                printf ("%d,",j);
<                }
<                printf ("\n");
<                }*/
<             //			printf ("Forming %d(%d,%d,%d),%d(%d,%d,%d)\n", c1,(chrom[c1].pseg)->beg,(chrom[c1].pseg)->end,(chrom[c1].pseg)->desc,c2,(chrom[c2].pseg)->beg,(chrom[c2].pseg)->end,(chrom[c2].pseg)->desc);
<             //ramcode
<         }
<     }
< 	}
<     //ramcode
<     if (debug){
<         printf ("desc\n");
<         for (i = 0 ; i < nsegs; i++){
<             int *desc = seglst[i].desc;
<             int j =  0;
<             for (j = 0 ; j < nsam;j++){
<                 printf ("%d,",desc[j]);
<             }
<             printf ("\n");
<         }
< 	}
<     //ramcode
< 
---
> 	else {
> 		   t += tmin ;	
> 		   if( event == 'r' ) {   
> 		      if( (ran = ran1()) < ( prec / prect ) ){ /*recombination*/
> 		     	  rchrom = re(nsam);
> 			  config[ chrom[rchrom].pop ] += 1 ;
> 		      }
> 		      else if( ran < (prec + clefta)/(prect) ){    /*  cleft event */
> 			 rchrom = cleftr(nsam);
> 			 config[ chrom[rchrom].pop ] += 1 ;
> 		      }
> 		      else  {         /* cin event */
> 			 rchrom = cinr(nsam,nsites);
> 			 if( rchrom >= 0 ) config[ chrom[rchrom].pop ] += 1 ;
> 		      }
> 		   }
> 	           else if ( event == 'm' ) {  /* migration event */
> 			x = mig*ran1();
> 			sum = 0.0 ;
> 			for( i=0; i<nchrom; i++) {
> 			  sum += migm[chrom[i].pop][chrom[i].pop] ;
> 			  if( x <sum ) break;
> 			  }
> 			migrant = i ;
> 			x = ran1()*migm[chrom[i].pop][chrom[i].pop];
> 			sum = 0.0;
> 			for(i=0; i<npop; i++){
> 			  if( i != chrom[migrant].pop ){
> 			    sum += migm[chrom[migrant].pop][i];
> 			    if( x < sum ) break;
> 			   }
> 			}
> 			source_pop = i;
> 			  config[chrom[migrant].pop] -= 1;
> 			  config[source_pop] += 1;
> 			  chrom[migrant].pop = source_pop ;
> 	           }
> 		   else { 								 /* coalescent event */
> 			/* pick the two, c1, c2  */
> 			pick2_chrom( cpop, config, &c1,&c2);  /* c1 and c2 are chrom's to coalesce */
> 			dec = ca(nsam,nsites,c1,c2 );
> 			config[cpop] -= dec ;
> 		   }
> 		 }
> 	     }  
665,668d391
< 
<     //ramcode
< 	free (done);
<     //ramcode
678c401
< 	int
---
> 	long
680c403
< 	int nsam;
---
> 	long nsam;
683c406
< 	int  el, lsg, lsgm1,  ic,  is, in, spot;
---
> 	long  el, lsg, lsgm1,  ic,  is, in, spot;
706,707c429,430
< 	int
< cleftr( int nsam)
---
> 	long
> cleftr( long nsam)
710c433
< 	int   lsg, lsgm1,  ic,  is, in, spot;
---
> 	long   lsg, lsgm1,  ic,  is, in, spot;
712c435
< 	int xover(int, int, int);
---
> 	int xover(long, long, long);
727,728c450,451
< int
< cinr( int nsam, int nsites)
---
> 	long
> cinr( long nsam, long nsites)
731c454
< 	int len,  el, lsg, lsgm1,  ic,  is, in, spot, endic ;
---
> 	long len,  el, lsg, lsgm1,  ic,  is, in, spot, endic ;
766,767d488
< // Make changes to the data for a xover event.
< // ic - chromosome, is - xover location
769c490
< xover(int nsam,int ic, int is)
---
> xover(long nsam,long ic, long is)
772c493
< 	int i,  lsg, lsgm1, newsg,  jseg, k,  in, spot;
---
> 	long i,  lsg, lsgm1, newsg,  jseg, k,  in, spot;
782,783d502
<     // jseg -- number of segments retained on current chr (left part)
<     // newsg -- number of segments moved to new chr (right part) 
801d519
<     // Pointer to segment for new chr
834c552
< 	   	      nnodes = (int *)realloc( nnodes,(unsigned)(sizeof(int)*seglimit)) ; 
---
> 	   	      nnodes = (long *)realloc( nnodes,(unsigned)(sizeof(long)*seglimit)) ; 
844,847d561
< 
<            //ramcode
< 		   seglst[nsegs].desc = seglst[i].desc;
<            //ramcode
868,869c582,583
< 	int nsam,c1,c2;
< 	int  nsites;
---
> 	long nsam,c1,c2;
> 	long  nsites;
871,872c585,586
< 	int yes1, yes2, seg1, seg2, seg ;
< 	int tseg, start, end, desc, k;
---
> 	long yes1, yes2, seg1, seg2, seg ;
> 	long tseg, start, end, desc, k;
906c620
< 			}
---
> 				}
931d644
< 
951c664
< 	int start, c, *psg;
---
> 	long start, c, *psg;
953c666
< 	int ns;
---
> 	long ns;
969c682
< 	int pop, *pc1, *pc2, config[];
---
> 	long pop, *pc1, *pc2, config[];
971c684
< 	int c1, c2, cs,cb,i, count;
---
> 	long c1, c2, cs,cb,i, count;
1001c714
< 	int c;
---
> 	long c;
1003c716
< 	int ns;
---
> 	long ns;
