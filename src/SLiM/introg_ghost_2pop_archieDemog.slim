// Keywords: tracking introgressed haplotypes

initialize()
{
	initializeMutationRate(20*1.25e-8);
	initializeMutationType("m1", 0.5, "f", 0.0);// introduced mutation
	initializeMutationType("m3", 0.5, "f", 0.0);// normal mutation
	initializeGenomicElementType("g1", m3, 1.0);
	initializeGenomicElement(g1, 0, physLen-1);
	initializeRecombinationRate(20*1e-8);

	defineConstant("subpopSize", 500);		
	defineConstant("burnTime", 20*subpopSize);
	defineConstant("archaicSplitTime", burnTime); // split immediately after burn-in
	defineConstant("simEndTime", asInteger(burnTime+(1.2*subpopSize))); // archaic split is 1.2N gen ago
	defineConstant("splitTime", asInteger(simEndTime-(0.25*subpopSize))); // recent split is 0.2N5 gen ago
	rMigTime = asInteger(0.2*subpopSize); //introgression 0.2N gen ago
	defineConstant("migTime", asInteger(simEndTime-rMigTime));
	
	cat("burnTime: " + burnTime + "\n");
	cat("splitTime: " + splitTime + "\n");
	cat("migTime: " + migTime + "\n");
	cat("simEndTime: " + simEndTime + "\n");
	
	defineConstant("migProb32", 0.02); //migration prob fixed at 2%
	cat("migProb: " + migProb32 + "\n");
}

s1 1000
{

	sim.addSubpopSplit("p3", subpopSize, p1);
	p1.setMigrationRates(p3, 0);
	p3.setMigrationRates(p1, 0);
}

s2 1000
{

	sim.addSubpopSplit("p2", subpopSize, p1);
	p1.setMigrationRates(c(p2,p3), c(0,0));
	p2.setMigrationRates(c(p1,p3), c(0,0));
	p3.setMigrationRates(c(p1,p2), c(0,0));
}

s3 2000
{
	p3.genomes.addNewMutation(m1, 0.0, 0:(physLen-1));
	p2.setMigrationRates(p3, migProb32);
}

s4 2000
{
	p1.setMigrationRates(c(p2,p3), c(0,0));
	p2.setMigrationRates(c(p1,p3), c(0,0));
	p3.setMigrationRates(c(p1,p2), c(0,0));
}

s5 3000 late()
{
	cat("Sampling at generation " + sim.generation + "\n");
	cat("Emitting fixations\n");
	sim.outputFixedMutations();
	cat("Done with fixations\n");
	pop1SampGenomes = sample(p1.genomes, sampleSizePerSubpop);
	pop2SampGenomes = sample(p2.genomes, sampleSizePerSubpop);
	fullSamp = c(pop1SampGenomes, pop2SampGenomes);
	fullSamp.output();
	cat("Done emitting sample\n");
	sim.simulationFinished();
}

1 {
	// save this run's identifier, used to save and restore
	defineConstant("simID", getSeed());
	
	// set up our subpop
	sim.addSubpop("p1", subpopSize);

	//schedule our events
	sim.rescheduleScriptBlock(s1, start=archaicSplitTime, end=archaicSplitTime);
	sim.rescheduleScriptBlock(s2, start=splitTime, end=splitTime);
	sim.rescheduleScriptBlock(s3, start=migTime, end=migTime);
	sim.rescheduleScriptBlock(s4, start=migTime+1, end=migTime+1);
	sim.rescheduleScriptBlock(s5, start=simEndTime, end=simEndTime);
}
